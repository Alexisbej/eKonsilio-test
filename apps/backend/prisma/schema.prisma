// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  VISITOR
  AGENT
  ADMIN
}

model User {
  id                String         @id @default(uuid())
  email             String?        @unique
  name              String?
  googleId          String?        @unique
  role              UserRole       @default(VISITOR)
  tenantId          String
  tenant            Tenant         @relation(fields: [tenantId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  conversations     Conversation[] @relation("UserConversations")
  messages          Message[]
  assignedConversations Conversation[] @relation("AgentConversations")
  temporaryToken    String?        @unique
  isAvailable       Boolean        @default(true)
  skills            String[]       @default([])
  maxWorkload       Int            @default(5)
  
  @@index([tenantId])
}

model Tenant {
  id           String         @id @default(uuid())
  name         String
  users        User[]
  conversations Conversation[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum ConversationStatus {
  PENDING
  ACTIVE
  CLOSED
}

model Conversation {
  id          String             @id @default(uuid())
  title       String?
  status      ConversationStatus @default(PENDING)
  userId      String
  user        User               @relation("UserConversations", fields: [userId], references: [id])
  agentId     String?
  agent       User?              @relation("AgentConversations", fields: [agentId], references: [id])
  tenantId    String
  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  messages    Message[]
  metadata    Json?              
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([userId])
  @@index([agentId])
  @@index([tenantId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([userId])
}
